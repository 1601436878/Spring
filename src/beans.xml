<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="book" class="bean.Book"></bean>
	<bean id="publish" class="bean.Publisher"></bean>
	
	<!-- i18n 国际化文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事件 -->
	<bean id="emailEvent" class="event.EmailNotifier"></bean>

	<!-- 多种设值类型测试 -->	
	<bean id="person" class="bean.Person">
	
		<!-- 1. 对于基本类型及其包装类，可直接使用value指定值 -->
		<property name="name" value="tom"></property>
		<property name="age" value="20"></property>
		<property name="height">
			<value>1.81</value>
		</property>
		
		<!-- 2. 配置合作者 bean，通过ref，将另一个bean作为参数传入。 -->
		<!-- <property name="favouriteBook" ref="book"></property> -->
		
		<!-- 3. 注入嵌套bean，不能被Spring容器直接访问，只用于当前的bean的赋值，因此，可以不写id -->
		<property name="favouriteBook">
			<bean class="bean.Book">
				<property name="bookName" value="追风筝的人"></property>
			</bean>
		</property>
	</bean>
	
	
	<!-- 4. 集合类型赋值 -->
	<bean id="listTest" class="bean.ListTest">
	
		<!-- 给List集合赋值 -->
		<property name="list_String">
			<list>
				<!-- 属性可以是很多种，value，bean，集合，map都可以 -->
				<value>list_String1</value>
				<value>list_String2</value>
				<value>list_String3</value>
			</list>
		</property>
		
		<!-- 给Map赋值 -->
		<property name="map">
			<map>
				<entry key="map_key0" value="map_value0"></entry>
				<entry key="map_key1" value="map_value1"></entry>
				<entry key="map_key1" value="map_value1"></entry>
			</map>
		</property>
		
		<!-- 给 Map<String,Publisher> 类型赋值 -->
		<property name="map_String_Publisher">
			<map>
				<entry key="publisher_0" value-ref="publish"></entry>
				<entry key="publisher_1" value-ref="publish"></entry>
				<entry key="publisher_2" value-ref="publish"></entry>
			</map>
		</property>
		
		<!-- 给 Properties 类型赋值 -->
		<property name="properties">
			<props>
				<prop key="properties_key0">properties_value0</prop>
				<prop key="properties_key1">properties_value1</prop>
				<prop key="properties_key2">properties_value2</prop>
			</props>
		</property>
		
		<!-- 给 Set类型赋值 -->
		<property name="set_Publisher">
			<set>
				<!-- 值 可以为任意类型 -->
				<value>set_中的普通字符串</value>
				<bean class="bean.Book">
					<property name="bookName" value="嫌疑人x的现身"></property>
				</bean>
				<list>
					<value>set_list_00</value>
					<value>set_list_01</value>
				</list>
			</set>
		</property>
		
		<!-- 给 String [] 赋值 -->
		<property name="strings">
			<list>
				<value>array_00</value>
				<value>array_01</value>
				<value>array_02</value>
			</list>
		</property>
	</bean>
	
	<!-- 组合属性,bean中的成员必须要已经被创建  -->
	<bean id="zuhe_book" class="bean.Book_zuhe">
		<property name="publish.publisherName" value="zuheshuxing_publisherName"></property>
	</bean>
	
	<!-- Person 中的setBook被自动装配，自动用id为book的bean作为参数 -->
	<bean id="person_autoWire" class="bean.Person" autowire="byName"></bean>
	
	<!-- 配置静态工厂类 -->
	<bean id="dog" class="factory.StaticFactory" factory-method="getBeing">
		<constructor-arg value="dog"></constructor-arg>
		<property name="message" value="dog_message"></property>
	</bean>
	<bean id="cat" class="factory.StaticFactory" factory-method="getBeing">
		<constructor-arg value="cat"></constructor-arg>
		<property name="message" value="cat_message"></property>
	</bean>
	
</beans>